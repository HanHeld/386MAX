# $Header:   P:/PVCS/MAX/CYA.MAV   1.3   31 May 1996 17:12:48   HENRY  $
#
# CYA.MAK - Top-level makefile for CYA
#
# This makefile builds everything.
#
# Requires: NMAKE (1.40) or QMAKE, CL (v8.0), ML6 (Masm 6.0), LIB (3.40),
#	    LINK (5.60), RC (3.11), RCPPP (named RCPP.EXE, with original
#	    RCPP.EXE named _RCPP.EXE in same directory), VDIR,
#	    XC, MASM5 (5.10B for flat model VxD code), MASM (5.10)
#

# Assert required environment variables
!if "$(MAXROOT)" == ""
  !error MAXROOT is not defined.  Ex: SET MAXROOT=c:\max\
!endif

# Bitch if not running Win95
!if "$(WIN)" != "32"
!message !!!!!!!!!!!!!!!!!! WARNING !!!!!!!!!!!!!!!!!!!
!message !!                                          !!
!message !! You are not running a Win32 environment. !!
!message !! Win32 components will not get built.     !!
!message !!                                          !!
!message !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!endif

## Needed only for C runtime (shared between projects)
#!if "$(CATROOT)" == ""
#  !error CATROOT is not defined.  Ex: SET CATROOT=c:\qdisp\
#!endif

# Get common definitions
CORECODE=X							# X for 386MAX, U for BlueMAX, V for Move'EM
!include $(MAXROOT)include\maxnames.mak
# (maxnames.mak defines defaults for LANG and BETA)

# Other values to be overridden on command line
DEBUG = 0							# 0 to generate non-debug (retail) version
BINDIR = $(MAXROOT)lib\ 			# Where to copy .EXE and .DLL files
LIBDIR = $(MAXROOT)lib\ 			# Where to copy .LIB files
TARGETS = BUILD 					# Targets to run on each makefile
GETCMD =							# Name of batch file containing "get ..."
DALL = 1							# Delete everything.  If 0 skip CodeBase
									# and C runtime (not mutable).
LIBINT3 = 0							# Puts Int 3 in each LibMain()
MFCDBG = 0							# Links CodeView info with MFC apps
# We displayed all four version numbers in the RC1 version by mistake.
# We're continuing to do it intentionally for now.
!if "$(DEBUG)" == "0"
BETA = 1							# Turn on display of build/module numbers
!else
BETA = 1							# Turn on full version display
!endif
ALPHA = 							# Non-empty for informal alpha build

# Other definitions
MRF = $(MAXROOT)cya.mrf 			# Make response file
NET = p:\max\						# Network MAXROOT
X = $(TOOLS)						# Where tools like PACKAGE.EXE live
BANG = !							# For use in generating makefiles

!if "$(TARGETS)" == "BUILD"
BTARGS=ALL
!else
BTARGS=$(TARGETS)
!endif

# Define projects to build.  If the project .MAK file has the same
# basename as the directory, use *.  All directories are relative
# to MAXROOT.

# Things nearly everyone may depend on (like include and C run-time)
# and miscellaneous stuff like text (which may copy needed .LIB files)
# and any .LIB files.  DOS help files, which need no mappings, live here
# as well.
NEEDNOTHING=INCLUDE.TRG INC.TRG TEXT.TRG TOOLS.TRG

# DLLs that need other libraries or DLLs built first
NEEDLIB=\

# Applications (which may need DLLs or .LIBs)
NEEDDLL=\
	CYA.TRG

# The first target will get built if nothing specified.  Note
# that we must identify prerequisites first.  *.TRG files must
# never exist; these names are used as targets only.
ALL:: NOTHING
	@echo --------------------------
	@echo $(TARGETS) libraries with no requirements: done
	@echo --------------------------
	vdir -c $(BINDIR)
!if "$(BINDIR)" != "$(MAXROOT)lib\"
	vdir -c $(MAXROOT)lib
!endif

ALL:: $(NEEDNOTHING)
	@echo --------------------------
	@echo $(TARGETS) .LIBs and miscellaneous stuff: done
	@echo --------------------------

ALL:: $(NEEDLIB)
	@echo --------------------------
	@echo $(TARGETS) Dynamic Link Libraries: done
	@echo --------------------------

ALL:: $(NEEDDLL)
	@echo --------------------------
	@echo $(TARGETS) applications: done
	@echo --------------------------

HELP:
	@echo Possible targets for CYA.MAK:
	@echo Low-level targets:
	@echo $(NEEDNOTHING)
	@echo.
	@echo DLLs:
	@$(COMSPEC) /c <<temp1.bat
	@echo off
	$(NEEDLIB: =^
	@echo )
<<KEEP
	@echo.
	@echo Applications:
	@$(COMSPEC) /c <<temp2.bat
	@echo off
	$(NEEDDLL: =^
	@echo )
<<KEEP
	@echo.
	@echo Predefined targets:
	@echo ALL DISK
	@echo.
	@echo TARGETS= values:
	@echo BUILD (default) GET DEL
	@echo.
	@echo Examples:
	@echo nmake /f cya.mak NET=
	@echo nmake /f cya.mak TARGETS=GET GETCMD="c:\max\myget.bat"
	@echo nmake /f cya.mak TARGETS=DEL DALL=0
	@echo nmake /f cya.mak BINDIR=z:\clip\henry\win\ asq.trg
	@echo nmake /f cya.mak 386max.trg

NOTHING:
!if "$(TARGETS)" == "BUILD"
	@echo Creating local definitions:
	@type <<$(MAXROOT)include\_lcldefs.h
#define BUILD_BETA		$(BETA) 			// Beta (not a retail) build
#define BUILD_ALPHA		"$(ALPHA)"                      // Alpha build suffix
<<KEEP
!endif

ALWAYS: NOTHING
	@echo Creating <<$(MAXROOT)cyacmd.mak
# MAKEFILE GENERATED BY CYA.MAK - DO NOT LOG IN

# Arguments:
# (note that these are all prefixed with CMD_ as the &make mechanism
#  does not protect the parent makefile's variables)
CMD_DIR =	# Directory relative to $(MAXROOT) (no trailing BS) 
CMD_MF  =	# makefile name
CMD_MRF	= $(MRF) # Response file to pass to subsequent $(MAKE)
CMD_WIN	= 16 # 16 or 32 for Windows target model
CMD_LMOD = 0 # 1 to override and build large model
CMD_MMOD = 0 # 1 to override and build medium model
CMD_SMOD = 0 # 1 to override and build small model

# See if we're overriding.  If not, we won't specify MODEL=
$(BANG)if $$(CMD_LMOD)
CMD_DMOD = 0
$(BANG)elseif $$(CMD_MMOD)
CMD_DMOD = 0
$(BANG)elseif $$(CMD_SMOD)
CMD_DMOD = 0
$(BANG)else
CMD_DMOD = 1
$(BANG)endif

ALL: LOG DIR $(MAXROOT)$$(CMD_MF)
# We've made sure dir exists, now make it the current directory
	@cd $(MAXROOT)$$(CMD_DIR)
# Invoke the actual makefile.  Spawn an actual $(MAKE)
	@echo Invoking $$(CMD_DIR)\$$(CMD_MF) - current dir:
	@cd
!if "$(BTARGS)" == "GET"
	$(MAKE) -$(MAKEFLAGS) -f $$(CMD_MF) WIN=$$(CMD_WIN) @$$(CMD_MRF)
!else
$(BANG)if $$(CMD_DMOD)
	$(MAKE) -$(MAKEFLAGS) -f $$(CMD_MF) WIN=$$(CMD_WIN) @$$(CMD_MRF)
$(BANG)else
$(BANG)if $$(CMD_LMOD)
	$(MAKE) -$(MAKEFLAGS) -f $$(CMD_MF) WIN=$$(CMD_WIN) MODEL=L @$$(CMD_MRF)
$(BANG)endif
$(BANG)if $$(CMD_MMOD)
	$(MAKE) -$(MAKEFLAGS) -f $$(CMD_MF) WIN=$$(CMD_WIN) MODEL=M @$$(CMD_MRF)
$(BANG)endif
$(BANG)if $$(CMD_SMOD)
	$(MAKE) -$(MAKEFLAGS) -f $$(CMD_MF) WIN=$$(CMD_WIN) MODEL=S @$$(CMD_MRF)
$(BANG)endif
$(BANG)endif
!endif
# Return to $(MAXROOT)
	@cd $(MAXROOT).
	@echo Done with $$(CMD_DIR)


LOG:
# Log activity
$(BANG)if "$$(MBLDOUT)" != ""
	@echo &make $$(CMD_DIR) $$(CMD_MF) $$(CMD_WIN) $$(CMD_LMOD) $$(CMD_MMOD) $$(CMD_SMOD) >>$$(MBLDOUT)
$(BANG)endif

DIR:
# Change drive
	@$(COMSPEC) /c $(MAXROOT)
# Make sure directory exists
	@vdir -c $(MAXROOT)$$(CMD_DIR)

!if "$(NET)" != ""
$(MAXROOT)$$(CMD_MF):
# Copy all makefiles from network
	@-xc /n/a/t $(NET)$$(CMD_DIR)\makefile $(MAXROOT)$$(CMD_DIR)
	@-xc /n/a/t $(NET)$$(CMD_DIR)\*.mak    $(MAXROOT)$$(CMD_DIR)
	@-xc /n/a/t $(NET)$$(CMD_DIR)\*.inc	 $(MAXROOT)$$(CMD_DIR)

!endif
<<KEEP

$(MRF): $(MAXROOT)cya.mak ALWAYS
# Note that we DON'T put WIN= in here because some projects are invoked
# twice with different WIN= values.  Ditto for MSVC=, which is set in
# $(I)maxnames.mak
	@echo Options passed to project makefiles:
	@type <<$(MRF)
BINDIR=$(BINDIR) DEBUG=$(DEBUG)
X=$(X) LIBINT3=$(LIBINT3) MFCDBG=$(MFCDBG)
ALPHA=$(ALPHA) BETA=$(BETA) LANG=$(LANG)
GETCMD="$(GETCMD)"
$(BTARGS)
<<KEEP

#DISK: $(MRF) DISK.TRG
#
#DISK.TRG:
#	@&make cyacmd.mak CMD_DIR=disk CMD_MF=disk.mak CMD_WIN=16

###############################################################################
# Targets without dependencies (including all code not belonging to Qualitas) #
###############################################################################

# Text and binary files distributed with product (but not built)
TEXT.TRG: $(MRF) TOOLS.TRG
	@&make cyacmd.mak CMD_DIR=text CMD_MF=text.mak CMD_WIN=16 PROD_CYA=1

# Header files and some .inc files (relevant only to GET action)
INCLUDE.TRG: $(MRF)
	@&make cyacmd.mak CMD_DIR=include CMD_MF=include.mak CMD_WIN=16

# MASM .inc files (relevant only to GET action)
INC.TRG: $(MRF)
	@&make cyacmd.mak CMD_DIR=inc CMD_MF=inc.mak CMD_WIN=16

# Odds and ends in the tool department
TOOLS.TRG: $(MRF)
	@&make cyacmd.mak CMD_DIR=tools CMD_MF=tools.mak CMD_WIN=16

## Modified C run-time library (under CATROOT)
#CRT.TRG: $(MRF)
#!if "$(TARGETS)" == "DEL" && $(DALL) == 0
#	@echo Skipping $* (DALL=0)
#!else
#	$(COMSPEC) /c $(CATROOT)
#	vdir -c $(CATROOT)crt
#	cd $(CATROOT)crt
#!if "$(NET)" != ""
#	xc /n/a/t p:\cat\crt\*.mak $(CATROOT)crt
#	xc /n/a/t p:\cat\crt\*.inc $(CATROOT)crt
#!endif
## Note that we must override the library output directory
#!if "$(BTARGS)" != "GET"
#	$(MAKE) WIN= OS=DOS L=$(LIBDIR) -$(MAKEFLAGS) -f crt.mak MODEL=L @$(MRF)
#	$(MAKE) WIN= OS=DOS L=$(LIBDIR) -$(MAKEFLAGS) -f crt.mak MODEL=M @$(MRF)
#	$(MAKE) WIN= OS=DOS L=$(LIBDIR) -$(MAKEFLAGS) -f crt.mak MODEL=S @$(MRF)
#!else
#	$(MAKE) WIN= OS=DOS L=$(LIBDIR) -$(MAKEFLAGS) -f crt.mak @$(MRF)
#!endif
#	$(COMSPEC) /c $(MAXROOT)
#	cd $(MAXROOT).
#!endif


##############################################################
# Static link libraries.  Some of these have dependencies as #
# there are shared .OBJ files.				     #
##############################################################


##########################
# Product help files	 #
##########################


##########################
# Dynamic link libraries #
##########################


################
# Applications #
################

CYA.TRG: $(MRF) STATUTIL.TRG
	@&make cyacmd.mak CMD_DIR=syssaver CMD_MF=syssaver.mak CMD_WIN=16
!if "$(BTARGS)" != "GET"
!if "$(WIN)" == "32"
	@&make cyacmd.mak CMD_DIR=syssaver CMD_MF=syssaver.mak CMD_WIN=32
!else
!message Skipping 32-bit cya32.exe...
!endif
!endif

STATUTIL.TRG: $(MRF)
	@&make cyacmd.mak CMD_DIR=statutil CMD_MF=statutil.mak CMD_WIN=16
!if "$(BTARGS)" != "GET"
!if "$(WIN)" == "32"
	@&make cyacmd.mak CMD_DIR=statutil CMD_MF=statutil.mak CMD_WIN=32
!else
!message Skipping 32-bit statutil...
!endif
!endif


###############
# End of file #
###############

