;' $Header:   P:/PVCS/MAX/QMT/MEM_COM.MAV   1.0   05 Sep 1995 16:56:12   HENRY  $
;
; (C) Copyright 1988-97 Qualitas, Inc.	All rights reserved.
;
; MEM_COM.MAC
;
; Common macros for fault testing
;


CALIB_STR struc

CALIB_OVHD dd	 ?		; Overhead time
CALIB_PERIT dd	 ?		; Per iteration time

CALIB_STR ends


PCALIB_STR struc

PCALIB_LEN dw	 ?		; # calibration entries for this module
PCALIB_PTR dw	 ?		; Ptr to the ptr to this module's
				; calibration entries
PCALIB_STR ends

PUBCNT	=	0

; ************************** PUBMAC ********************************************

PUBMAC	macro	TST,BWD,MAC

	PUBMAC2 &TST&_&BWD&_&MAC&_,%PUBCNT

PUBCNT	=	PUBCNT + 1

	endm			; PUBMAC


; ************************** PUBMAC2 *******************************************

PUBMAC2 macro	LBL,CNT

;;;;;;; public	LBL&CNT
LBL&CNT:

LBLSEG	segment use16 word public 'data' ; Start LBLSEG segment
;;;;;;; assume	ds:DGROUP

	dw	offset PGROUP:LBL&CNT

LBLSEG	ends			; End LBLSEG segment

	endm			; PUBMAC2


; ************************** DELAY *********************************************

DELAY	macro
	local	DELAY_NEXT,DELAY_EXIT

	push	cx		; Save register

	mov	cx,DELAYNUM	; Get the current delay # (in seconds)
	jcxz	DELAY_EXIT	; Jump if no delay

	or	GL3_FLAG,@GL3_DELAY ; Mark as in delay
DELAY_NEXT:
	REGSAVE <ax,cx,dx>	; Save for a moment

	mov	ah,86h		; Get function code to wait
	mov	cx,ONESEC.EHI	; CX:DX = time to delay in microseconds
	mov	dx,ONESEC.ELO	; ...
	int	15h		; Request system services

	REGREST <dx,cx,ax>	; Restore

	call	CHECK_KEYS	; See if any interesting keys were pressed
	jne	short DELAY_EXIT ; Jump if we're to halt (purge the buffer)

	loop	DELAY_NEXT	; Jump if more time to delay

	and	GL3_FLAG,not @GL3_DELAY ; No longer in delay
DELAY_EXIT:
	pop	cx		; Restore

	dec	DELAYCNT	; Count out another delay

	endm			; DELAY


; ************************** INCOPERS ******************************************

INCOPERS macro	 NAM,BWD

	 REGSAVE <eax,edx>	; Save for a moment

; Add in the constant overhead time (if any)

	 mov	 eax,CALIB_&NAM.CALIB_OVHD ; Get this macro's overhead time
	 add	 NUMOPERS.EDQLO,eax ; Add into cumulative count
	 adc	 NUMOPERS.EDQHI,0 ; ...

; Add in the per iteration time times the byte size

	 mov	 eax,CALIB_&NAM.CALIB_PERIT ; Get this macro's per iteration time
	 mul	 edx		; Multiply by byte count
	 add	 NUMOPERS.EDQLO,eax ; Add into cumulative count
	 adc	 NUMOPERS.EDQHI,edx ; ...

	 REGREST <edx,eax>	; Restore

	 call	 DISP_OPERS	; Format and display # operations so far

ifidn <BWD>,<D>
CALIBSEG segment use16 word public 'data' ; Start CALIBSEG segment
;;;;;;;; assume  ds:DGROUP

	 dw	 DGROUP:CALIB_&NAM ; Ptr to calibration structure

CALIBSEG ends			; End CALIBSEG segment
endif				; IFIDN <BWD>,<D>

	 endm			; INCOPERS


; ************************** W0_MAC ********************************************

W0_MAC	macro	NAM,SHF,STR,REG,BWD,TST,CAL
	local	ZAP1,MACNAME

MACNAME equ	<W0>

ifb <CAL>

; Write 0s up

	 call	 FMT_W0 	; Format and display W0 message
endif				; IFB <CAL>

	 mov	 edi,TIMETAB[bx].TT_LBASE ; ES:EDI ==> A[0]
	 mov	 ecx,edx	; ECX = N (in bytes)
	 shr	 ecx,SHF-0	; Convert from bytes to bytes/words/dwords
	 mov	 REG,REG0UP.&STR ; All 0s data going up
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERRUP ; Save NMI error addr
endif				; IFB <CAL>

	 mov	 ZAPOFF,offset cs:ZAP1 ; Save zap offset
ZAP1:
%	PUBMAC	TST BWD MACNAME
     rep stos	 es:[edi].&STR	; Write 0s up
%	PUBMAC	TST BWD MACNAME
	 call	 ZAPREST	; Restore zapped prefix

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
ifb <CAL>
	 INCOPERS W0,BWD	; Count in more operations
	DELAY			; Wait if requested to
endif				; IFB <CAL>

	 endm			; W0_MAC


; ************************** R0DN_MAC ******************************************

R0DN_MAC macro	NAM,SHF,STR,REG,BWD,TST,CAL
	local	ZAP1,MACNAME

MACNAME equ	<R0DN>

ifb <CAL>

; Read 0s down

	 call	 FMT_R0DN	; Format and display R0DN message
endif				; IFB <CAL>
	 mov	 edi,TIMETAB[bx].TT_LBASE ; ES:EDI ==> A[0]
	 add	 edi,edx	; ES:EDI ==> A[N]
	 sub	 edi,BPU	; ES:EDI ==> A[N-1]
	 mov	 ecx,edx	; ECX = N (in bytes)
	 shr	 ecx,SHF-0	; Convert from bytes to bytes/words/dwords
	 mov	 REG,REG0DN.&STR ; All 0s data going down
	 mov	 esi,REG0DN	; Save as expected pattern
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERRUP ; Save NMI error addr
endif				; IFB <CAL>
	 mov	 ZAPOFF,offset cs:ZAP1 ; Save zap offset

	std			; String ops backwards
ZAP1:
%	PUBMAC	TST BWD MACNAME
    repe scas	 es:[edi].&STR	; Read 0s up
%	PUBMAC	TST BWD MACNAME

	 cld			; Restore direction flag
	 call	 ZAPREST	; Restore zapped prefix
ifb <CAL>
	 jne	 near ptr NAM&BWD&_ERR0DN ; Jump if mismatch reading 0s down
endif				; IFB <CAL>
	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
ifb <CAL>
	 INCOPERS R0DN,BWD	; Count in more operations
	DELAY			; Wait if requested to
endif				; IFB <CAL>
	 endm			; R0DN_MAC


; ************************** R0W1_MAC ******************************************

R0W1_MAC macro	NAM,SHF,STR,REG,BWD,TST,CAL
	local	R0W1_NEXT,RES1,MACNAME

MACNAME equ	<R0W1>

ifb <CAL>

; Read 0s and Write 1s up

	 call	 FMT_R0W1	; Format and display R0W1 message
endif				; IFB <CAL>
	 mov	 edi,TIMETAB[bx].TT_LBASE ; ES:EDI ==> A[0]
	 mov	 ecx,edx	; ECX = N (in bytes)
	 shr	 ecx,SHF-0	; Convert from bytes to bytes/words/dwords
R0W1_NEXT:

; Read 0s

	 mov	 REG,REG0UP.&STR ; All 0s data going up
	 mov	 esi,REG0UP	; Save as expected pattern
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERR ; Save NMI error addr
	mov	RESOFF,offset cs:RES1 ; Save restart offset
endif				; IFB <CAL>
	 cmp	 REG,es:[edi].&STR ; Read 0s
%	PUBMAC	TST BWD MACNAME A
ifb <CAL>
	 jne	 near ptr NAM&BWD&_ERR0 ; Jump if mismatch
endif				; IFB <CAL>
RES1:
	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>

; Write 1s up

	 mov	 REG,REG1UP.&STR ; All 1s data going up
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERRUP ; Save NMI error addr
endif				; IFB <CAL>
	stos	es:[edi].&STR	; Write 1s up
%	PUBMAC	TST BWD MACNAME

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	 loop	 dword ptr R0W1_NEXT ; Jump if more pairs to Read/Write
ifb <CAL>
	 INCOPERS R0W1,BWD	; Count in more operations
	DELAY			; Wait if requested to
endif				; IFB <CAL>

	 endm			; R0W1_MAC


; ************************** R0W1DN_MAC ****************************************

R0W1DN_MAC macro NAM,SHF,STR,REG,BWD,TST,R0,CAL
	local	R0W1DN_NEXT,RES1,MACNAME

MACNAME equ	<R0W1DN>

ifb <CAL>

; Read 0s and Write 1s down

	 call	 FMT_R0W1DN	; Format and display R0W1DN message
endif				; IFB <CAL>
	 mov	 edi,TIMETAB.TT_LBASE[bx] ; ES:EDI ==> A[0]
	 add	 edi,edx	; ES:EDI ==> A[N]
	 sub	 edi,BPU	; ES:EDI ==> A[N-1]
	 mov	 ecx,edx	; ECX = N (in bytes)
	 shr	 ecx,SHF-0	; Convert from bytes to bytes/words/dwords
R0W1DN_NEXT:

; Read 0s

	 mov	 REG,R0.&STR	; All 0s data in previous direction
	 mov	 esi,R0 	; Save as expected pattern
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERR ; Save NMI error addr
	mov	RESOFF,offset cs:RES1 ; Save restart offset
endif				; IFB <CAL>
	 cmp	 REG,es:[edi].&STR ; Read 0s
%	PUBMAC	TST BWD MACNAME
ifb <CAL>
	 jne	 near ptr NAM&BWD&_ERR0 ; Jump if mismatch
endif				; IFB <CAL>
RES1:
	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>

; Write 1s down

	 mov	 REG,REG1DN.&STR ; All 1s data going down
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERRDN ; Save NMI error addr
endif				; IFB <CAL>
	 std			; String ops backwards
	stos	es:[edi].&STR	; Write 1s down
%	PUBMAC	TST BWD MACNAME
	 cld			; Restore direction flag

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	 loop	 dword ptr R0W1DN_NEXT ; Jump if more pairs to Read/Write
ifb <CAL>
	 INCOPERS R0W1DN,BWD	; Count in more operations
	DELAY			; Wait if requested to
endif				; IFB <CAL>
	 endm			; R0W1DN_MAC


; ************************** R0W1W0DN_MAC **************************************

R0W1W0DN_MAC macro NAM,SHF,STR,REG,BWD,TST,CAL
	local	R0W1W0DN_NEXT,RES1,MACNAME

MACNAME equ	<R0W1W0DN>

ifb <CAL>

; Read 0s, Write 1s, and Write 0s down

	 call	 FMT_R0W1W0DN	; Format and display R0W1W0DN message
endif				; IFB <CAL>
	 mov	 edi,TIMETAB.TT_LBASE[bx] ; ES:EDI ==> A[0]
	 add	 edi,edx	; ES:EDI ==> A[N]
	 sub	 edi,BPU	; ES:EDI ==> A[N-1]
	 mov	 ecx,edx	; ECX = N (in bytes)
	 shr	 ecx,SHF-0	; Convert from bytes to bytes/words/dwords
R0W1W0DN_NEXT:

; Read 0s, Write 1s

	 mov	 REG,REG1DN.&STR ; All 1s data going down
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERR ; Save NMI error addr
endif				; IFB <CAL>
	 xchg	 REG,es:[edi]	; Read 0s, Write 1s
%	PUBMAC	TST BWD MACNAME

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	mov	RESOFF,offset cs:RES1 ; Save restart offset
	 mov	 esi,REG0DN	; Save as expected pattern

	 cmp	 REG,REG0DN.&STR ; Check for all 0s
ifb <CAL>
	 jne	 near ptr NAM&BWD&_ERR0X ; Jump if mismatch
endif				; IFB <CAL>
RES1:

; Write 0s down

;;;;;;;; mov	 REG,REG0DN.&STR ; All 0s data going down
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERRDN ; Save NMI error addr
endif				; IFB <CAL>
	 std			; String ops backwards
	stos	es:[edi].&STR	; Write 0s down
%	PUBMAC	TST BWD MACNAME
	 cld			; Restore direction flag

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	 loop	 dword ptr R0W1W0DN_NEXT ; Jump if more pairs to Read/Write
ifb <CAL>
	 INCOPERS R0W1W0DN,BWD	; Count in more operations
	DELAY			; Wait if requested to
endif				; IFB <CAL>
	 endm			; R0W1W0DN_MAC


; ************************** R0W1R1_MAC ****************************************

R0W1R1_MAC macro NAM,SHF,STR,REG,BWD,TST,CAL
	local	R0W1R1_NEXT,RES1,RES2,MACNAME

MACNAME equ	<R0W1R1>

ifb <CAL>

; Read 0s, Write 1s, and Read 1s up

	 call	 FMT_R0W1R1	; Format and display R0W1R1 message
endif				; IFB <CAL>
	 mov	 edi,TIMETAB[bx].TT_LBASE ; ES:EDI ==> A[0]
	 mov	 ecx,edx	; ECX = N (in bytes)
	 shr	 ecx,SHF-0	; Convert from bytes to bytes/words/dwords
R0W1R1_NEXT:

; Read 0s, Write 1s

	 mov	 REG,REG1UP.&STR ; All 1s data going up
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERR ; Save NMI error addr
endif				; IFB <CAL>
	 xchg	 REG,es:[edi]	; Read 0s, Write 1s
%	PUBMAC	TST BWD MACNAME

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	mov	RESOFF,offset cs:RES1 ; Save restart offset
	 mov	 esi,REG0UP	; Save as expected pattern

	 cmp	 REG,REG0UP.&STR ; Check for all 0s
ifb <CAL>
	 jne	 near ptr NAM&BWD&_ERR0X ; Jump if mismatch
endif				; IFB <CAL>
RES1:

; Read 1s up

	 mov	 REG,REG1UP.&STR ; All 1s data going up
	 mov	 esi,REG1UP	; Save as expected pattern
ifb <CAL>
	mov	NMIOFF,offset PGROUP:NAM&BWD&_NMIERR ; Save NMI error addr
	mov	RESOFF,offset cs:RES2 ; Save restart offset
endif				; IFB <CAL>

	 scas	 es:[edi].&STR	; Read 1s up
%	PUBMAC	TST BWD MACNAME
ifb <CAL>
	 jne	 near ptr NAM&BWD&_ERR1UP ; Jump if mismatch
endif				; IFB <CAL>
RES2:
	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	 loop	 dword ptr R0W1R1_NEXT ; Jump if more pairs to Read/Write
ifb <CAL>
	 INCOPERS R0W1R1,BWD	; Count in more operations
	DELAY			; Wait if requested to
endif				; IFB <CAL>
	 endm			; R0W1R1_MAC


; ************************** R0W1R1W0R0W1_MAC **********************************

R0W1R1W0R0W1_MAC macro NAM,SHF,STR,REG,BWD,TST,CAL
	local	R0W1R1W0R0W1_NEXT,RES1,RES2,RES3,MACNAME

MACNAME equ	<R0W1R1W0R0W1>

ifb <CAL>

; Read 0s, Write 1s, Read 1s, Write 0s, Read 0s, and Write 1s up

	 call	 FMT_R0W1R1W0R0W1 ; Format and display R0W1R1W0R0W1 message
endif				; IFB <CAL>
	 mov	 edi,TIMETAB[bx].TT_LBASE ; ES:EDI ==> A[0]
	 mov	 ecx,edx	; ECX = N (in bytes)
	 shr	 ecx,SHF-0	; Convert from bytes to bytes/words/dwords
R0W1R1W0R0W1_NEXT:

; Read 0s, Write 1s

	 mov	 REG,REG1UP.&STR ; All 1s data going up
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERR ; Save NMI error addr
endif				; IFB <CAL>
	 xchg	 REG,es:[edi]	; Read 0s, Write 1s
%	PUBMAC	TST BWD MACNAME

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	mov	RESOFF,offset cs:RES1 ; Save restart offset
	 mov	 esi,REG0UP	; Save as expected pattern

	 cmp	 REG,REG0UP.&STR ; Check for all 0s
ifb <CAL>
	 jne	 near ptr NAM&BWD&_ERR0X ; Jump if mismatch
endif				; IFB <CAL>
RES1:

; Read 1s, Write 0s

;;;;;;;; mov	 REG,REG0UP.&STR ; All 0s data going up
ifb <CAL>
;;;;;;; mov	NMIOFF,offset PGROUP:NAM&BWD&_NMIERR ; Save NMI error addr
endif				; IFB <CAL>
	 xchg	 REG,es:[edi]	; Read 1s, Write 0s
%	PUBMAC	TST BWD MACNAME

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	mov	RESOFF,offset cs:RES2 ; Save restart offset
	 mov	 esi,REG1UP	; Save as expected pattern

	 cmp	 REG,REG1UP.&STR ; Check for all 1s
ifb <CAL>
	 jne	 near ptr NAM&BWD&_ERR1X ; Jump if mismatch
endif				; IFB <CAL>
RES2:

; Read 0s

	 mov	 REG,REG0UP.&STR ; All 0s data going up
ifb <CAL>
;;;;;;; mov	NMIOFF,offset PGROUP:NAM&BWD&_NMIERR ; Save NMI error addr
	mov	RESOFF,offset cs:RES3 ; Save restart offset
endif				; IFB <CAL>
	 mov	 esi,REG0UP	; Save as expected pattern

	 cmp	 REG,es:[edi].&STR ; Read 0s
%	PUBMAC	TST BWD MACNAME
ifb <CAL>
	 jne	 near ptr NAM&BWD&_ERR0 ; Jump if mismatch
endif				; IFB <CAL>
RES3:
	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>

; Write 1s up

	 mov	 REG,REG1UP.&STR ; All 1s data going up
ifb <CAL>
;;;;;;; mov	NMIOFF,offset PGROUP:NAM&BWD&_NMIERR ; Save NMI error addr
endif				; IFB <CAL>

	stos	es:[edi].&STR	; Write 1s up
%	PUBMAC	TST BWD MACNAME

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	loop	dword ptr R0W1R1W0R0W1_NEXT ; Jump if more pairs to Read/Write
ifb <CAL>
	 INCOPERS R0W1R1W0R0W1,BWD ; Count in more operations
	DELAY			; Wait if requested to
endif				; IFB <CAL>
	 endm			; R0W1R1W0R0W1_MAC


; ************************** R1W0_MAC ******************************************

R1W0_MAC macro	 NAM,SHF,STR,REG,BWD,TST,CAL
	local	R1W0_NEXT,RES1,MACNAME

MACNAME equ	<R1W0>

ifb <CAL>

; Read 1s and Write 0s up

	 call	 FMT_R1W0	; Format and display R1W0 message
endif				; IFB <CAL>
	 mov	 edi,TIMETAB[bx].TT_LBASE ; ES:EDI ==> A[0]
	 mov	 ecx,edx	; ECX = N (in bytes)
	 shr	 ecx,SHF-0	; Convert from bytes to bytes/words/dwords
R1W0_NEXT:

; Read 1s

	 mov	 REG,REG1UP.&STR ; All 1s data going up
	 mov	 esi,REG1UP	; Save as expected pattern
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERR ; Save NMI error addr
	mov	RESOFF,offset cs:RES1 ; Save restart offset
endif				; IFB <CAL>
	 cmp	 REG,es:[edi].&STR ; Read 1s
%	PUBMAC	TST BWD MACNAME
ifb <CAL>
	 jne	 near ptr NAM&BWD&_ERR1 ; Jump if mismatch
endif				; IFB <CAL>
RES1:
	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>

; Write 0s up

	 mov	 REG,REG0UP.&STR ; All 0s data going up
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERRUP ; Save NMI error addr
endif				; IFB <CAL>

	stos	es:[edi].&STR	; Write 0s up
%	PUBMAC	TST BWD MACNAME

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	 loop	 dword ptr R1W0_NEXT ; Jump if more pairs to Read/Write
ifb <CAL>
	 INCOPERS R1W0,BWD	; Count in more operations
	DELAY			; Wait if requested to
endif				; IFB <CAL>
	 endm			; R1W0_MAC


; ************************** R1W0DN_MAC ****************************************

R1W0DN_MAC macro NAM,SHF,STR,REG,BWD,TST,R1,CAL
	local	R1W0DN_NEXT,RES1,MACNAME

MACNAME equ	<R1W0DN>

ifb <CAL>

; Read 1s and Write 0s down

	 call	 FMT_R1W0DN	; Format and display R1W0DN message
endif				; IFB <CAL>
	 mov	 edi,TIMETAB.TT_LBASE[bx] ; ES:EDI ==> A[0]
	 add	 edi,edx	; ES:EDI ==> A[N]
	 sub	 edi,BPU	; ES:EDI ==> A[N-1]
	 mov	 ecx,edx	; ECX = N (in bytes)
	 shr	 ecx,SHF-0	; Convert from bytes to bytes/words/dwords
R1W0DN_NEXT:

; Read 1s

	 mov	 REG,R1.&STR	; All 1s data in previous direction
	 mov	 esi,R1 	; Save as expected pattern
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERR ; Save NMI error addr
	mov	RESOFF,offset cs:RES1 ; Save restart offset
endif				; IFB <CAL>
	 cmp	 REG,es:[edi].&STR ; Read 1s
%	PUBMAC	TST BWD MACNAME
ifb <CAL>
	 jne	 near ptr NAM&BWD&_ERR1 ; Jump if mismatch
endif				; IFB <CAL>
RES1:
	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>

; Write 0s down

ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERRDN ; Save NMI error addr
endif				; IFB <CAL>
	 mov	 REG,REG0DN.&STR ; All 0s data going down

	 std			; String ops backwards
	stos	es:[edi].&STR	; Write 0s down
%	PUBMAC	TST BWD MACNAME
	 cld			; Restore direction flag

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	 loop	 dword ptr R1W0DN_NEXT ; Jump if more pairs to Read/Write
ifb <CAL>
	 INCOPERS R1W0DN,BWD	; Count in more operations
	DELAY			; Wait if requested to
endif				; IFB <CAL>
	 endm			; R1W0DN_MAC


; ************************** R1W0R0DN_MAC **************************************

R1W0R0DN_MAC macro NAM,SHF,STR,REG,BWD,TST,R1,CAL
	local	R1W0R0DN_NEXT,RES1,RES2,MACNAME

MACNAME equ	<R1W0R0DN>

ifb <CAL>

; Read 1s, Write 0s, and Read 0s down

	 call	 FMT_R1W0R0DN	; Format and display R1W0R0DN message
endif				; IFB <CAL>
	 mov	 edi,TIMETAB[bx].TT_LBASE ; ES:EDI ==> A[0]
	 add	 edi,edx	; ES:EDI ==> A[N]
	 sub	 edi,BPU	; ES:EDI ==> A[N-1]
	 mov	 ecx,edx	; ECX = N (in bytes)
	 shr	 ecx,SHF-0	; Convert from bytes to bytes/words/dwords
R1W0R0DN_NEXT:

; Read 1s, Write 0s

	 mov	 REG,REG0DN.&STR ; All 0s data
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERR ; Save NMI error addr
endif				; IFB <CAL>
	 xchg	 REG,es:[edi]	; Read 1s, Write 0s
%	PUBMAC	TST BWD MACNAME

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	mov	RESOFF,offset cs:RES1 ; Save restart offset
	 mov	 esi,R1 	; Save as expected pattern

	 cmp	 REG,R1.&STR	; Check for all 1s in previous direction
ifb <CAL>
	 jne	 near ptr NAM&BWD&_ERR1X ; Jump if mismatch
endif				; IFB <CAL>
RES1:

; Read 0s down

	 mov	 REG,REG0DN.&STR ; All 0s data going down
	 mov	 esi,REG0DN	; Save as expected pattern
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERRDN ; Save NMI error addr
	mov	RESOFF,offset cs:RES2 ; Save restart offset
endif				; IFB <CAL>
	 std			; String ops backwards
	 scas	 es:[edi].&STR	; Read 0s down
%	PUBMAC	TST BWD MACNAME
	 cld			; Restore direction flag
ifb <CAL>
	 jne	 near ptr NAM&BWD&_ERR0DN ; Jump if mismatch
endif				; IFB <CAL>
RES2:
	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	 loop	 dword ptr R1W0R0DN_NEXT ; Jump if more pairs to Read/Write
ifb <CAL>
	 INCOPERS R1W0R0DN,BWD	; Count in more operations
	DELAY			; Wait if requested to
endif				; IFB <CAL>
	 endm			; R1W0R0DN_MAC


; ************************** R1W0W1_MAC ****************************************

R1W0W1_MAC macro NAM,SHF,STR,REG,BWD,TST,CAL
	local	R1W0W1_NEXT,RES1,MACNAME

MACNAME equ	<R1W0W1>

ifb <CAL>

; Read 1s, Write 0s, and Write 1s up

	 call	 FMT_R1W0W1	; Format and display R1W0W1 message
endif				; IFB <CAL>
	 mov	 edi,TIMETAB[bx].TT_LBASE ; ES:EDI ==> A[0]
	 mov	 ecx,edx	; ECX = N (in bytes)
	 shr	 ecx,SHF-0	; Convert from bytes to bytes/words/dwords
R1W0W1_NEXT:

; Read 1s, Write 0s

	 mov	 REG,REG0UP.&STR ; All 0s data going up
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERR ; Save NMI error addr
endif				; IFB <CAL>
	 xchg	 REG,es:[edi]	; Read 1s, Write 0s
%	PUBMAC	TST BWD MACNAME

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	mov	RESOFF,offset cs:RES1 ; Save restart offset
	 mov	 esi,REG1UP	; Save as expected pattern

	 cmp	 REG,REG1UP.&STR ; Check for all 1s
ifb <CAL>
	 jne	 near ptr NAM&BWD&_ERR1X ; Jump if mismatch
endif				; IFB <CAL>
RES1:

; Write 1s up

;;;;;;;; mov	 REG,REG1UP.&STR ; All 1s data
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERRUP ; Save NMI error addr
endif				; IFB <CAL>

	stos	es:[edi].&STR	; Write 1s down
%	PUBMAC	TST BWD MACNAME

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	 loop	 dword ptr R1W0W1_NEXT ; Jump if more pairs to Read/Write
ifb <CAL>
	 INCOPERS R1W0W1,BWD	; Count in more operations
	DELAY			; Wait if requested to
endif				; IFB <CAL>
	 endm			; R1W0W1_MAC


; ************************** R1W0W1W0DN_MAC ************************************

R1W0W1W0DN_MAC macro NAM,SHF,STR,REG,BWD,TST,R1,CAL
	local	R1W0W1W0DN_NEXT,RES1,MACNAME

MACNAME equ	<R1W0W1W0DN>

ifb <CAL>

; Read 1s, Write 0s, Write 1s, and Write 0s down

	 call	 FMT_R1W0W1W0DN ; Format and display R1W0W1W0DN message
endif				; IFB <CAL>
	 mov	 edi,TIMETAB[bx].TT_LBASE ; ES:EDI ==> A[0]
	 add	 edi,edx	; ES:EDI ==> A[N]
	 sub	 edi,BPU	; ES:EDI ==> A[N-1]
	 mov	 ecx,edx	; ECX = N (in bytes)
	 shr	 ecx,SHF-0	; Convert from bytes to bytes/words/dwords
R1W0W1W0DN_NEXT:

; Read 1s, Write 0s

	 mov	 REG,REG0DN.&STR ; All 0s data going down
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERR ; Save NMI error addr
endif				; IFB <CAL>
	 xchg	 REG,es:[edi]	; Read 1s, Write 0s
%	PUBMAC	TST BWD MACNAME

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	mov	RESOFF,offset cs:RES1 ; Save restart offset
	 mov	 esi,R1 	; Save as expected pattern

	 cmp	 REG,R1.&STR	; Check for all 1s in previous direction
ifb <CAL>
	 jne	 near ptr NAM&BWD&_ERR1X ; Jump if mismatch
endif				; IFB <CAL>
RES1:

; Write 1s

	 mov	 REG,REG1DN.&STR ; All 1s data going down
ifb <CAL>
	mov	NMIOFF,offset PGROUP:NAM&BWD&_NMIERR ; Save NMI error addr
endif				; IFB <CAL>
	 mov	 es:[edi].&STR,REG ; Write 1s
%	PUBMAC	TST BWD MACNAME

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>

; Write 0s down

	 mov	 REG,REG0DN.&STR ; All 0s data going down
ifb <CAL>
	 mov	 NMIOFF,offset PGROUP:NAM&BWD&_NMIERRDN ; Save NMI error addr
endif				; IFB <CAL>
	 std			; String ops backwards
	stos	es:[edi].&STR	; Write 0s down
%	PUBMAC	TST BWD MACNAME
	 cld			; Restore direction flag

	 call	 CHECK_HALT	; See if we should halt testing
ifb <CAL>
	 jnz	 near ptr NAM&BWD&_NMIERREXT ; Jump if so
endif				; IFB <CAL>
	 loop	 dword ptr R1W0W1W0DN_NEXT ; Jump if more pairs to Read/Write
ifb <CAL>
	 INCOPERS R1W0W1W0DN,BWD ; Count in more operations
	DELAY			; Wait if requested to
endif				; IFB <CAL>
	 endm			; R1W0W1W0DN_MAC


